plugins {
  id 'java-library'
  id 'maven-publish'
  id 'idea'
  id 'net.neoforged.moddev' version '2.0.88'
}

group = project.maven_group
version = project.mod_version + "+" + project.minecraft_version
base {
  archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

neoForge {
  version = project.neo_version

  parchment {
    mappingsVersion = project.parchment_mappings_version
    minecraftVersion = project.parchment_minecraft_version
  }

  runs {
    client {
      client()

      // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
      systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    server {
      server()
      programArgument '--nogui'
      systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
      type = "gameTestServer"
      systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    data {
      clientData()

      // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
      // gameDirectory = project.file('run-data')

      // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
      programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }

    // applies to all the run configs above
    configureEach {
      // Recommended logging data for a userdev environment
      // The markers can be added/remove as needed separated by commas.
      // "SCAN": For mods scan.
      // "REGISTRIES": For firing of registry events.
      // "REGISTRYDUMP": For getting the contents of all registries.
      systemProperty 'forge.logging.markers', 'REGISTRIES'

      // Recommended logging level for the console
      // You can set various levels here.
      // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
      logLevel = org.slf4j.event.Level.DEBUG
    }
  }

  mods {
    // define mod <-> source bindings
    // these are used to tell the game which sources are for which mod
    // mostly optional in a single mod project
    // but multi mod projects should define one per mod
    "${mod_id}" {
      sourceSet(sourceSets.main)
    }
  }
}

sourceSets {
  testmod {
    compileClasspath += main.compileClasspath
    runtimeClasspath += main.runtimeClasspath
  }
}

repositories {
}

dependencies {

}

processResources {
  def replaceProperties = [
      minecraft_version      : minecraft_version,
      minecraft_version_range: minecraft_version_range,
      neo_version            : neo_version,
      neo_version_range      : neo_version_range,
      loader_version_range   : loader_version_range,
      mod_id                 : mod_id,
      mod_name               : mod_name,
      mod_license            : mod_license,
      mod_version            : mod_version,
      mod_authors            : mod_authors,
      mod_description        : mod_description
  ]
  filesMatching(['pack.mcmeta', 'META-INF/neoforge.mods.toml', '*.mixins.json']) {
    expand replaceProperties
  }
  inputs.properties(replaceProperties)
}

tasks.withType(JavaCompile).configureEach {
  it.options.encoding = "UTF-8"
  it.options.release = 21
}

java {
  withSourcesJar()
}

jar {
  from "LICENSE"
}

publishing {
  publications {
    register('mavenJava', MavenPublication) {
      from components.java
    }
  }

  repositories {
    mavenLocal()
  }
}

idea {
  module {
    downloadSources = true
    downloadJavadoc = true
  }
}